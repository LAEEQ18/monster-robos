{"version":3,"sources":["components/card/card.componet.jsx","components/card-list/card-list.components.jsx","components/saerch-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monsters","id","name","email","CardList","map","key","SearchBox","placeholder","handlechange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","Response","json","users","this","FilterMonster","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4UAIaA,G,MAAO,SAAAC,GAAK,OAEzB,yBAAKC,UAAW,kBAEb,yBAAKC,IAAM,WACXC,IAAG,+BAA0BH,EAAMI,SAASC,GAAzC,4BAEF,4BAAML,EAAMI,SAASE,MACzB,4BAAKN,EAAMI,SAASG,OACpB,4BAAKP,EAAMI,SAASC,OCNPG,G,MAAW,SAAAR,GAExB,OAAQ,yBAAKC,UAAU,aAEfD,EAAMI,SAASK,KAAI,SAAAL,GAAQ,OAAE,kBAAC,EAAD,CAAMM,IAAMN,EAASC,GAAID,SAAUA,UCR3DO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OAErB,2BACAZ,UAAW,SACXa,KAAO,SACPF,YAAaA,EACZG,SAAUF,MCmDAG,G,wDA/Cb,aAAc,IAAD,8BACX,gBAcFH,aAAe,SAAAI,GAEX,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAdvC,EAAKC,MAAM,CACTlB,SAAS,GACTe,YAAY,IALH,E,gEAQO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACd,SAASuB,S,+BAO7B,IAAD,EAEsBC,KAAKN,MAA3BlB,EAFA,EAEAA,SAASe,EAFT,EAESA,YACVU,EAAgBzB,EAAS0B,QAAO,SAAA1B,GAAQ,OAAGA,EAASE,KAAKyB,cAAcC,SAASb,EAAYY,kBAElG,OACE,yBAAK9B,UAAU,OACb,sDACA,kBAAC,EAAD,CACEW,YAAY,kBACZC,aAAgBe,KAAKf,eAMvB,kBAAC,EAAD,CAAUT,SAAYyB,S,GApCZI,cCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.edf0f55f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.style.css';\r\n\r\nexport const Card = props =>\r\n (\r\n<div className ='card-container'>\r\n\r\n   <img alt = 'monsters'\r\n   src={`https://robohash.org/${props.monsters.id}?set=set2&size=180x180`} />\r\n\r\n    <h1 >{props.monsters.name}</h1>\r\n<h2>{props.monsters.email}</h2>\r\n<h3>{props.monsters.id}</h3>\r\n    </div>\r\n\r\n);","import React from 'react';\r\n\r\nimport {Card} from '../card/card.componet'\r\n\r\nimport './card-list.style.css';\r\n\r\n\r\nexport const CardList = props => {\r\n    // console.log(props); the pros are now passing names and set it in grid {props.children} is passing the children\r\nreturn (<div className='card-list'>\r\n    {\r\n        props.monsters.map(monsters=><Card key= {monsters.id} monsters={monsters}/>)\r\n        }\r\n\r\n\r\n</div>)\r\n}","import React from 'react';\r\nimport './search-box.style.css'\r\n\r\nexport const SearchBox = ({placeholder,handlechange}) => (\r\n\r\n    <input \r\n    className ='search' \r\n    type = 'search'\r\n    placeholder={placeholder}\r\n     onChange={handlechange} />\r\n\r\n);\r\n    ","import React , {Component}from 'react';\n// import logo from './logo.svg';\n\nimport {CardList} from './components/card-list/card-list.components';\nimport {SearchBox} from './components/saerch-box/search-box.component';\nimport './App.css';\nimport './index.css';\n\n// function App() {\n \n// } instead of function we write class of that function below\n\nclass App extends Component {\n  constructor(){\n    super();\n    // this.state={string: \"Hello Maliks ..!\"}\n    this.state={\n      monsters:[],\n      searchField:''\n    }\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(Response => Response.json())\n    // .then(users=>console.log(users))\n    .then(users=>this.setState({monsters:users}));\n  }\n\n  handlechange = e =>\n     {\n      this.setState({searchField: e.target.value})\n    };\n  render() {\n\n    const {monsters,searchField}=this.state;\n    const FilterMonster = monsters.filter(monsters=> monsters.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex @M.L</h1>\n        <SearchBox\n          placeholder='search-monsters'\n          handlechange = {this.handlechange}\n\n         \n  \n      \n      />\n        <CardList monsters = {FilterMonster}>\n          {/* {<h1>Maliks..</h1>   these are childrens so here i pass monsters name }  after i shift map function card-list file*/}\n          \n          \n        </CardList>\n        \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}